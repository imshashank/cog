package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _data_config_schema_v1_0_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x93\x41\x8f\xd3\x30\x10\x85\xef\xfd\x15\x4f\x01\x09\x56\xea\x26\xa0\x3d\xb0\xea\x0d\xc1\x05\x09\xa4\x3d\xec\x05\xa1\x15\x72\xe3\x49\x32\x4b\x62\x07\x7b\xd2\xa5\x54\xfd\xef\x28\x4e\xd2\x75\xda\x00\x17\xab\x9d\x79\xf3\x66\x32\x9f\x7d\x58\x01\xc9\x4b\x9f\x57\xd4\xa8\x64\x83\xa4\x12\x69\x37\x59\xf6\xe8\xad\xb9\x1e\xa2\xa9\x75\x65\xa6\x9d\x2a\xe4\xfa\xcd\xbb\x6c\x54\xae\x43\x19\xeb\xa8\x84\x7e\xa9\xa6\xad\x29\xcd\x6d\x73\xfa\xdd\xdb\x0c\x5a\xd9\xb7\xd4\x8b\xed\xf6\x91\x72\x19\x63\x2c\x75\x08\x7e\xb0\xe5\x2b\x8f\xdc\x9a\x82\x4b\x7c\x7d\xff\xe5\x33\xe2\x36\x9a\x7c\xee\xb8\x15\xb6\xa6\x17\xdf\x57\xec\xc7\x3c\xd8\xa3\xf3\xa4\x21\x16\x3b\x55\xb3\x56\x42\xc8\x6d\x99\xee\x55\x53\xa3\xe0\x9a\xc0\x06\xa4\xf2\x0a\xad\xb3\x7d\xe3\xf4\x94\xd5\x54\xb0\x21\x8f\xca\x3e\xf5\xe5\xdb\x8e\x6b\x0d\x85\x8f\x36\xff\x41\x0e\xdc\xa8\x92\xa0\x8c\x9e\xf2\xae\x33\x68\x1d\x69\xce\xfb\x39\x3c\xac\xc1\xde\x76\x0e\x8d\xd5\x54\x83\x8d\x67\x4d\x90\x4a\xc9\x50\x9a\x4e\xa3\x17\xaa\xab\x25\xd9\xe0\x70\x0c\x81\x71\x31\x3e\xd9\xe0\xdb\x0a\x00\x0e\xe1\x04\x92\x30\x40\x2f\x1c\x03\x40\xd2\xee\xa5\xb2\xe6\xfb\x8e\x9c\x1f\xbf\xfd\x26\xbd\x4d\xc6\xfc\x71\x35\x9d\x0f\xc1\xd9\xd1\xcf\x8e\x1d\xe9\x93\xf3\xe8\x78\x12\xb4\xce\xb6\xe4\x84\x43\xf3\xc3\x6a\xb1\xe9\x84\xf4\x45\xf6\xac\xce\x06\xd1\x7a\x92\x2c\x90\x1c\xe2\x13\xcd\xfb\x8a\xc6\x75\x46\x14\x83\x64\x91\xa4\x28\xf3\x5b\x61\x48\x6d\xcf\x81\x48\x45\x73\x24\xd1\xd2\x5d\x67\x3c\xd8\xa4\xf8\x24\xfd\xdd\x11\xc5\xc6\x63\xa7\x1c\xdb\xce\xc3\xb6\x03\xa7\x27\x96\x8a\x0d\x58\x36\xf1\x18\x73\x2a\x21\x78\x41\x26\xa6\xf3\x7f\x1c\x13\x90\x71\xdb\xa1\xe0\x02\xc9\x92\xcd\x45\xd5\x02\xa7\xe5\xf6\xb3\xe1\xfe\x0a\x2e\x0e\x9c\x59\xac\x63\x83\x09\xab\x17\xc7\xa6\x3c\xcb\xc5\x68\xe7\x26\xe7\x8c\x97\x39\x13\x1a\x36\xd6\xe1\xf5\x4d\x7a\x7b\x05\xeb\xd0\x2a\xc9\xab\xf0\x37\x7d\x7b\x85\xc9\xcb\x16\xb8\x0b\xee\xfd\x05\xe8\xfc\xf8\x8a\x22\xdb\x89\x5b\x32\x4f\x2c\xb2\x0b\x99\x19\x21\xe0\xe1\x82\xd6\xf3\x05\x50\x5a\x73\x3f\xb1\xaa\xef\x62\x02\xe2\x3a\x3a\x3d\xb5\xe1\x11\xff\x4b\x79\xfc\x13\x00\x00\xff\xff\x50\x29\xe5\xed\x51\x05\x00\x00")

func data_config_schema_v1_0_json() ([]byte, error) {
	return bindata_read(
		_data_config_schema_v1_0_json,
		"data/config_schema_v1.0.json",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"data/config_schema_v1.0.json": data_config_schema_v1_0_json,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"data": &_bintree_t{nil, map[string]*_bintree_t{
		"config_schema_v1.0.json": &_bintree_t{data_config_schema_v1_0_json, map[string]*_bintree_t{
		}},
	}},
}}
